@model StoreViewModel
@{
    ViewBag.Title = "Store";
}

<div class="container">
    <form method="get" asp-action="Index" id="storeFilterForm">
        <!-- Search Bar -->
        <div class="row">
            <div class="col-12 p-3 store-top">
                    <div class="input-group">
                        <input type="text" name="SearchQuery" value="@Model.SearchQuery" class="form-control" placeholder="Search games..." />
                        <button class="btn btn-dark text-white" type="submit">Search</button>
                    </div>
            </div>
        </div>

        <div class="row">
            <!-- Left Sidebar: Categories -->
            <div class="col-md-2 store-left p-3">
                <h5>Categories</h5>
                @foreach (var category in Model.AvailableCategories.OrderBy(c => c.Name))
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="SelectedCategoryIds" value="@category.Id"
                               @(Model.SelectedCategoryIds.Contains(category.Id) ? "checked" : "") />
                        <label class="form-check-label">@category.Name</label>
                    </div>
                }
            </div>

            <!-- Main Content: Video Game Cards -->
            <div class="col-md-8 store-middle p-0" id="gamesContainer">
                @foreach (var game in Model.Games)
                {
                    @await Html.PartialAsync("_VideoGameCard", game)
                }
            </div>

            <!-- Right Sidebar: Sorting -->
            <div class="col-md-2 store-right p-3">
                <h5>Sort By</h5>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="SortBy" value="PriceAsc" 
                           @(Model.SortBy == "PriceAsc" ? "checked" : "") />
                    <label class="form-check-label">Price (Low to High)</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="SortBy" value="PriceDesc" 
                           @(Model.SortBy == "PriceDesc" ? "checked" : "") />
                    <label class="form-check-label">Price (High to Low)</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="SortBy" value="Title" 
                           @(Model.SortBy == "Title" ? "checked" : "") />
                    <label class="form-check-label">Title</label>
                </div>
            </div>
        </div>
    </form>
</div>


@section Styles {
    <link rel="stylesheet" href="~/css/store.css" />
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('storeFilterForm');
            const gamesContainer = document.getElementById('gamesContainer');
            
            const debounce = (func, delay) => {
                let timeoutId;
                return function() {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => func.apply(this, arguments), delay);
                };
            };

            const submitAjaxForm = async () => {
                try {
                    const formData = new FormData(form);
                    const params = new URLSearchParams();
                    
                    if (formData.get('SearchQuery')) {
                        params.append('searchQuery', formData.get('SearchQuery'));
                    }
                    
                    formData.getAll('SelectedCategoryIds').forEach(id => {
                        params.append('selectedCategoryIds', id);
                    });
                    
                    if (formData.get('SortBy')) {
                        params.append('sortBy', formData.get('SortBy'));
                    }
                    
                    const url = `@Url.Action("Index", "Store")?${params.toString()}`;
                    console.log('Request URL:', url);

                    const response = await fetch(url, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'text/html'
                        },
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const html = await response.text();
                    gamesContainer.innerHTML = html;
                } catch (error) {
                    console.error('Error:', error);
                    gamesContainer.innerHTML = `<div class="alert alert-danger">Error loading results. Please try again.</div>`;
                }
            };
            
            const debouncedSubmit = debounce(submitAjaxForm, 300);
            
            form.addEventListener('change', function(e) {
                if (e.target.matches('input[name="SearchQuery"], input[name="SelectedCategoryIds"], input[name="SortBy"]')) {
                    debouncedSubmit();
                }
            });

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitAjaxForm();
            });
        });
    </script>
}